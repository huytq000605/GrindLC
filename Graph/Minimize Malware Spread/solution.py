class UF:
    def __init__(self, n):
        self.p = [i for i in range(n)]
        self.r = [1 for i in range(n)]
    
    def find(self, u):
        if u != self.p[u]:
            self.p[u] = self.find(self.p[u])
        return self.p[u]
    
    def union(self, u, v):
        u, v = self.find(u), self.find(v)
        if self.r[u] < self.r[v]:
            u, v = v, u
        if u == v:
            return
        self.r[u] += self.r[v]
        self.p[v] = u

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        if len(initial) == 1:
            return initial[0]
        initial = set(initial)
        n = len(graph)
        uf = UF(n)
        for i in range(n):
            for j in range(n):
                if graph[i][j]:
                    uf.union(i, j)
        
        # this node is infected by set of nodes
        infected_by = defaultdict(set)
        
        # set of nodes that were infected by this node
        infected = defaultdict(set)
        
        for i in initial:
            for j in range(n):
                if graph[i][j]:
                    j = uf.find(j)
                    infected_by[j].add(i)
                    infected[i].add(j)
        result = 0
        free = -math.inf
        for i in initial:
            num = 0
            for j in infected[i]:
                if len(infected_by[j]) == 1:
                    num += uf.r[j]

            if num > free:
                result = i
                free = num
            elif num == free:
                result = min(result, i)
           
        return result