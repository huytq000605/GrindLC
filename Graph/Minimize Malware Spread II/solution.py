class UF:
    def __init__(self, n):
        self.p = [i for i in range(n)]
        self.r = [1 for i in range(n)]
    
    def find(self, u):
        if u != self.p[u]:
            self.p[u] = self.find(self.p[u])
        return self.p[u]
    
    def union(self, u, v):
        u, v = self.find(u), self.find(v)
        if self.r[u] < self.r[v]:
            u, v = v, u
        if u == v:
            return
        self.r[u] += self.r[v]
        self.p[v] = u

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        if len(initial) == 1:
            return initial[0]
        initial_set = set(initial)
        n = len(graph)
        initial.sort()
        result = initial[0]
        max_free = 0
        for node in initial:
            uf = UF(n)
            for i in range(n):
                for j in range(n):
                    if i == node or j == node:
                        continue
                    if graph[i][j] == 1:
                        uf.union(i, j)
                    elif i != node and j != node and i in initial_set and j in initial_set:
                        uf.union(i, j)
            
            if initial[0] == node:
                free = n - 1 - uf.r[uf.find(initial[1])]
            else:
                free = n - 1 - uf.r[uf.find(initial[0])]

            if free > max_free:
                result = node
                max_free = free
        return result